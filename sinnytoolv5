local SinnyTool = loadstring(game:HttpGet("https://raw.githubusercontent.com/deeeity/mercury-lib/master/src.lua"))()
local GUI = SinnyTool:Create{
    Name = "Sinny Tool",
    Size = UDim2.fromOffset(600, 400),
    Theme = SinnyTool.Themes.Dark,
    Link = "https://github.com/sinny999s/sinnytoolv5"
}

-- Tab 1: Player (Aimbot only)
local Tab1 = GUI:Tab{
    Name = "Player",
    Icon = "rbxassetid://8569322835"
}

local player = game.Players.LocalPlayer
local camera = workspace.CurrentCamera
local runService = game:GetService("RunService")
local UIS = game:GetService("UserInputService")
local targetPlayer = nil
local smoothness = 5 -- Default smoothness value (1 to 10)
local aimbotConnection
local MIN_TARGET_Y = 5 -- Minimum Y position for valid targets
local FOV_RADIUS = 70 -- Default FOV radius

-- Initialize Aimbot state
getgenv().AimbotEnabled = false

-- Function to check if a target is within FOV
local function isInFOV(targetPosition)
    local direction = (targetPosition - camera.CFrame.Position).Unit
    local cameraDirection = camera.CFrame.LookVector
    local angle = math.deg(math.acos(direction:Dot(cameraDirection)))
    return angle <= (FOV_RADIUS / 2) -- Use FOV_RADIUS
end

-- Function to check if the enemy is visible to the player
local function isVisibleToPlayer(enemyPlayer)
    local humanoidRootPart = enemyPlayer.Character and enemyPlayer.Character:FindFirstChild("HumanoidRootPart")
    if humanoidRootPart then
        local direction = (humanoidRootPart.Position - camera.CFrame.Position).Unit
        local ray = Ray.new(camera.CFrame.Position, direction * (humanoidRootPart.Position - camera.CFrame.Position).Magnitude)
        local hitPart = workspace:FindPartOnRay(ray, player.Character)
        return hitPart == nil or hitPart.Parent == enemyPlayer.Character
    end
    return false
end

-- Get the closest visible enemy player
local function getClosestVisibleEnemyPlayer()
    local closestDistance = math.huge
    local closestPlayer = nil

    for _, enemyPlayer in pairs(game.Players:GetPlayers()) do
        if enemyPlayer ~= player and enemyPlayer.TeamColor ~= player.TeamColor and enemyPlayer.Character then
            local humanoidRootPart = enemyPlayer.Character:FindFirstChild("HumanoidRootPart")
            local humanoid = enemyPlayer.Character:FindFirstChild("Humanoid")

            if humanoidRootPart and humanoid and humanoid.Health > 0 then
                local targetPosition = humanoidRootPart.Position
                
                if targetPosition.Y > MIN_TARGET_Y and isInFOV(targetPosition) and isVisibleToPlayer(enemyPlayer) then
                    local distance = (player.Character.HumanoidRootPart.Position - targetPosition).Magnitude
                    
                    if distance < closestDistance then
                        closestDistance = distance
                        closestPlayer = enemyPlayer
                    end
                end
            end
        end
    end

    return closestPlayer
end

-- Start the Aimbot
local function startAimbot()
    if aimbotConnection then return end
    aimbotConnection = runService.Stepped:Connect(function()
        if getgenv().AimbotEnabled then
            if targetPlayer and targetPlayer.Character then
                local humanoidRootPart = targetPlayer.Character:FindFirstChild("HumanoidRootPart")
                if humanoidRootPart then
                    local targetPosition = humanoidRootPart.Position
                    
                    if targetPosition.Y > MIN_TARGET_Y and isInFOV(targetPosition) and isVisibleToPlayer(targetPlayer) then
                        local currentCFrame = camera.CFrame
                        local targetCFrame = CFrame.new(currentCFrame.Position, targetPosition)
                        local newCFrame = currentCFrame:Lerp(targetCFrame, smoothness / 10)

                        camera.CFrame = newCFrame
                    else
                        targetPlayer = getClosestVisibleEnemyPlayer() -- Find new target
                    end
                else
                    targetPlayer = getClosestVisibleEnemyPlayer() -- Get new target if no humanoidRootPart
                end
            else
                targetPlayer = getClosestVisibleEnemyPlayer() -- Find closest visible enemy
            end
        else
            stopAimbot()
        end
    end)
end

-- Stop the Aimbot
local function stopAimbot()
    if aimbotConnection then
        aimbotConnection:Disconnect()
        aimbotConnection = nil
    end
end

-- Aimbot Toggle
Tab1:Toggle{
    Name = "Enable Aimbot",
    Default = false,
    Callback = function(state)
        getgenv().AimbotEnabled = state
        if state then
            print("Aimbot Enabled")
            targetPlayer = getClosestVisibleEnemyPlayer() -- Set initial target
            startAimbot()
        else
            stopAimbot()
            print("Aimbot Disabled")
        end
    end
}

-- Smoothness Slider
Tab1:Slider{
    Name = "Aimbot Smoothness",
    Min = 1,
    Max = 10,
    Default = 5,
    Callback = function(value)
        smoothness = value
        print("Smoothness set to " .. value)
    end
}

-- FOV Radius Slider
Tab1:Slider{
    Name = "FOV Radius",
    Min = 10,
    Max = 150,
    Default = FOV_RADIUS,
    Callback = function(value)
        FOV_RADIUS = value
        print("FOV Radius set to " .. value)
    end
}

-- Input Handling for Aimbot and Target Switching
UIS.InputBegan:Connect(function(input, gameProcessedEvent)
    if input.UserInputType == Enum.UserInputType.MouseButton2 then -- Right Mouse Button
        getgenv().AimbotEnabled = true
        targetPlayer = getClosestVisibleEnemyPlayer() -- Set initial target
        startAimbot()
    end

    if input.KeyCode == Enum.KeyCode.T then
        if getgenv().AimbotEnabled then
            targetPlayer = getClosestVisibleEnemyPlayer() -- Switch to the closest visible enemy
            if targetPlayer then
                print("Target switched to: " .. targetPlayer.Name) -- Print target switch confirmation
            else
                print("No visible enemies found.")
            end
        end
    end
end)

UIS.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton2 then -- Right Mouse Button
        getgenv().AimbotEnabled = false
        stopAimbot()
    end
end)

-- Tab 2: Gun Mods
local Tab2 = GUI:Tab{
    Name = "Gun Mods",
    Icon = "rbxassetid://8569322835"
}

-- Original Values Storage
local originalValues = {
    FireRate = {},
    ReloadTime = {},
    EReloadTime = {},
    Auto = {},
    Spread = {},
    Recoil = {}
}

-- Infinite Ammo Toggle
local SettingsInfinite = false
local ammoConnection

Tab2:Toggle{
    Name = "Infinite Ammo",
    Default = false,
    Description = "Toggle infinite ammo on or off.",
    Callback = function(state)
        SettingsInfinite = state
        if SettingsInfinite then
            ammoConnection = runService.Heartbeat:Connect(function()
                pcall(function()
                    local playerGui = game.Players.LocalPlayer:WaitForChild("PlayerGui")
                    local gui = playerGui:WaitForChild("GUI")

                    if gui.Client.Variables:FindFirstChild("ammocount") then
                        gui.Client.Variables.ammocount.Value = 999
                    end
                    if gui.Client.Variables:FindFirstChild("ammocount2") then
                        gui.Client.Variables.ammocount2.Value = 999
                    end
                end)
            end)
            print("Infinite Ammo Enabled")
        else
            if ammoConnection then
                ammoConnection:Disconnect()
                ammoConnection = nil
            end
            print("Infinite Ammo Disabled")
        end
    end
}

-- Fast Reload Toggle
Tab2:Toggle{
    Name = "Fast Reload",
    Default = false,
    Description = "Toggle fast reload.",
    Callback = function(state)
        for _, v in pairs(game.ReplicatedStorage.Weapons:GetChildren()) do
            if v:FindFirstChild("ReloadTime") then
                if state then
                    if not originalValues.ReloadTime[v] then
                        originalValues.ReloadTime[v] = v.ReloadTime.Value
                    end
                    v.ReloadTime.Value = 0.01
                else
                    if originalValues.ReloadTime[v] then
                        v.ReloadTime.Value = originalValues.ReloadTime[v]
                    else
                        v.ReloadTime.Value = 0.8
                    end
                end
            end
            if v:FindFirstChild("EReloadTime") then
                if state then
                    if not originalValues.EReloadTime[v] then
                        originalValues.EReloadTime[v] = v.EReloadTime.Value
                    end
                    v.EReloadTime.Value = 0.01
                else
                    if originalValues.EReloadTime[v] then
                        v.EReloadTime.Value = originalValues.EReloadTime[v]
                    else
                        v.EReloadTime.Value = 0.8
                    end
                end
            end
        end
    end
}

-- Fast Fire Rate Toggle
Tab2:Toggle{
    Name = "Fast Fire Rate",
    Default = false,
    Description = "Toggle fast fire rate.",
    Callback = function(state)
        for _, v in pairs(game.ReplicatedStorage.Weapons:GetDescendants()) do
            if v.Name == "FireRate" or v.Name == "BFireRate" then
                if state then
                    if not originalValues.FireRate[v] then
                        originalValues.FireRate[v] = v.Value
                    end
                    v.Value = 0.02
                else
                    if originalValues.FireRate[v] then
                        v.Value = originalValues.FireRate[v]
                    else
                        v.Value = 0.8
                    end
                end
            end
        end
    end
}

-- Always Auto Toggle
Tab2:Toggle{
    Name = "Always Auto",
    Default = false,
    Description = "Toggle always auto-fire.",
    Callback = function(state)
        for _, v in pairs(game.ReplicatedStorage.Weapons:GetDescendants()) do
            if v.Name == "Auto" or v.Name == "AutoFire" or v.Name == "Automatic" or v.Name == "AutoShoot" or v.Name == "AutoGun" then
                if state then
                    if not originalValues.Auto[v] then
                        originalValues.Auto[v] = v.Value
                    end
                    v.Value = true
                else
                    if originalValues.Auto[v] then
                        v.Value = originalValues.Auto[v]
                    else
                        v.Value = false
                    end
                end
            end
        end
    end
}

-- No Spread Toggle
Tab2:Toggle{
    Name = "No Spread",
    Default = false,
    Description = "Toggle no spread.",
    Callback = function(state)
        for _, v in pairs(game:GetService("ReplicatedStorage").Weapons:GetDescendants()) do
            if v.Name == "MaxSpread" or v.Name == "Spread" or v.Name == "SpreadControl" then
                if state then
                    if not originalValues.Spread[v] then
                        originalValues.Spread[v] = v.Value
                    end
                    v.Value = 0
                else
                    if originalValues.Spread[v] then
                        v.Value = originalValues.Spread[v]
                    else
                        v.Value = 1
                    end
                end
            end
        end
    end
}

-- No Recoil Toggle
Tab2:Toggle{
    Name = "No Recoil",
    Default = false,
    Description = "Toggle no recoil.",
    Callback = function(state)
        for _, v in pairs(game:GetService("ReplicatedStorage").Weapons:GetDescendants()) do
            if v.Name == "RecoilControl" or v.Name == "Recoil" then
                if state then
                    if not originalValues.Recoil[v] then
                        originalValues.Recoil[v] = v.Value
                    end
                    v.Value = 0
                else
                    if originalValues.Recoil[v] then
                        v.Value = originalValues.Recoil[v]
                    else
                        v.Value = 1
                    end
                end
            end
        end
    end
}

-- Tab 3: Movement
local Tab3 = GUI:Tab{
    Name = "Movement",
    Icon = "rbxassetid://8569322835"
}

-- Speed Boost Toggle
local speedBoostEnabled = false
local defaultWalkSpeed = player.Character and player.Character:FindFirstChild("Humanoid") and player.Character.Humanoid.WalkSpeed or 16
local boostedSpeed = 50 -- Set desired boosted speed

Tab3:Toggle{
    Name = "Speed Boost",
    Default = false,
    Callback = function(state)
        speedBoostEnabled = state
        if state then
            player.Character.Humanoid.WalkSpeed = boostedSpeed
            print("Speed Boost Enabled")
        else
            player.Character.Humanoid.WalkSpeed = defaultWalkSpeed
            print("Speed Boost Disabled")
        end
    end
}

-- Teleportation Toggle
local teleportEnabled = false

Tab3:Toggle{
    Name = "Teleportation",
    Default = false,
    Callback = function(state)
        teleportEnabled = state
        if state then
            print("Teleportation Enabled. Click to teleport.")
        else
            print("Teleportation Disabled.")
        end
    end
}

UIS.InputBegan:Connect(function(input, gameProcessedEvent)
    if teleportEnabled and input.UserInputType == Enum.UserInputType.MouseButton1 and not gameProcessedEvent then
        local mouse = player:GetMouse()
        player.Character.HumanoidRootPart.Position = Vector3.new(mouse.Hit.X, mouse.Hit.Y + 3, mouse.Hit.Z)
    end
end)

-- Fly Toggle
local flying = false
local flyConnection

Tab3:Toggle{
    Name = "Fly",
    Default = false,
    Callback = function(state)
        flying = state
        if state then
            local bodyVelocity = Instance.new("BodyVelocity")
            bodyVelocity.Velocity = Vector3.new(0, 0, 0)
            bodyVelocity.MaxForce = Vector3.new(4000, 4000, 4000)
            bodyVelocity.Parent = player.Character.HumanoidRootPart

            flyConnection = runService.RenderStepped:Connect(function()
                if flying and player.Character then
                    local moveDirection = Vector3.new(0, 0, 0)
                    if UIS:IsKeyDown(Enum.KeyCode.W) then moveDirection = moveDirection + camera.CFrame.LookVector end
                    if UIS:IsKeyDown(Enum.KeyCode.S) then moveDirection = moveDirection - camera.CFrame.LookVector end
                    if UIS:IsKeyDown(Enum.KeyCode.A) then moveDirection = moveDirection - camera.CFrame.RightVector end
                    if UIS:IsKeyDown(Enum.KeyCode.D) then moveDirection = moveDirection + camera.CFrame.RightVector end
                    
                    bodyVelocity.Velocity = Vector3.new(moveDirection.X * 50, (UIS:IsKeyDown(Enum.KeyCode.Space) and 50) or (UIS:IsKeyDown(Enum.KeyCode.LeftShift) and -50) or 0, moveDirection.Z * 50)
                else
                    if flyConnection then
                        flyConnection:Disconnect()
                        bodyVelocity:Destroy() -- Cleanup the BodyVelocity
                    end
                end
            end)
        else
            if flyConnection then
                flyConnection:Disconnect()
                player.Character.HumanoidRootPart:FindFirstChildOfClass("BodyVelocity"):Destroy() -- Clean up the BodyVelocity if flying is stopped
            end
        end
    end
}

-- Wall Climbing Toggle
local wallClimbEnabled = false

Tab3:Toggle{
    Name = "Wall Climbing",
    Default = false,
    Callback = function(state)
        wallClimbEnabled = state
        if state then
            print("Wall Climbing Enabled")
        else
            print("Wall Climbing Disabled")
        end
    end
}

runService.RenderStepped:Connect(function()
    if wallClimbEnabled and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        local rootPart = player.Character.HumanoidRootPart
        if rootPart.Velocity.Y > 0 then -- If player is jumping
            local ray = Ray.new(rootPart.Position, rootPart.CFrame.LookVector * 2)
            local hit = workspace:FindPartOnRay(ray, player.Character)
            if hit and hit:IsA("Part") and hit.CanCollide then
                rootPart.Velocity = Vector3.new(rootPart.Velocity.X, 50, rootPart.Velocity.Z) -- Adjust this value for how high you want to climb
            end
        end
    end
end)

-- Infinite Jump Toggle
local jumpEnabled = false
local jumpHeight = 50

local function onInputBegan(UserInput)
    if jumpEnabled and UserInput.UserInputType == Enum.UserInputType.Keyboard and UserInput.KeyCode == Enum.KeyCode.Space then
        local character = game.Players.LocalPlayer.Character
        if character and character:FindFirstChild("Humanoid") then
            local humanoid = character.Humanoid
            if humanoid:GetState() == Enum.HumanoidStateType.Jumping or humanoid:GetState() == Enum.HumanoidStateType.Freefall then
                local rootPart = character:FindFirstChild("HumanoidRootPart")
                if rootPart then
                    rootPart.Velocity = Vector3.new(0, jumpHeight, 0)
                end
            end
        end
    end
end

UIS.InputBegan:Connect(onInputBegan)

Tab3:Toggle{
    Name = "Infinite Jump",
    Default = false,
    Callback = function(state)
        jumpEnabled = state
        if state then
            print("Infinite Jump Enabled")
        else
            print("Infinite Jump Disabled")
        end
    end
}

-- Tab 4: Credits
local Tab4 = GUI:Tab{ 
    Name = "Credits",
    Icon = "rbxassetid://8569322835"
}

-- Button to copy Discord server link
Tab4:Button{
    Name = "Copy Discord Link",
    Callback = function()
        setclipboard("https://discord.gg/GHU7dzJquE") -- Your actual Discord link
        print("Discord link copied to clipboard!")
    end
}

print("Script loaded successfully.")
