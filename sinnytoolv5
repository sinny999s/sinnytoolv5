local Mercury = loadstring(game:HttpGet("https://raw.githubusercontent.com/deeeity/mercury-lib/master/src.lua"))()

local GUI = Mercury:Create{
    Name = "Mercury",
    Size = UDim2.fromOffset(600, 400),
    Theme = Mercury.Themes.Dark,
    Link = "https://github.com/sinny999s/sinnytoolv5"
}

-- Tab 1: Player (Aimbot and ESP)
local Tab1 = GUI:Tab{
    Name = "Player",
    Icon = "rbxassetid://8569322835"
}

local player = game.Players.LocalPlayer
local camera = workspace.CurrentCamera
local runService = game:GetService("RunService")
local userInputService = game:GetService("UserInputService")

local targetPlayer = nil -- Store the current target player
local smoothness = 5 -- Default smoothness value (1 to 10)
local mouseDown = false
local aimbotConnection

function getClosestEnemyPlayer()
    local closestDistance = math.huge
    local closestPlayer = nil

    for _, enemyPlayer in pairs(game.Players:GetPlayers()) do
        if enemyPlayer ~= player and enemyPlayer.TeamColor ~= player.TeamColor and enemyPlayer.Character then
            local character = enemyPlayer.Character
            local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
            local humanoid = character:FindFirstChild("Humanoid")

            if humanoidRootPart and humanoid and humanoid.Health > 0 then
                local distance = (player.Character.HumanoidRootPart.Position - humanoidRootPart.Position).Magnitude
                if distance < closestDistance and humanoidRootPart.Position.Y >= 0 then
                    closestDistance = distance
                    closestPlayer = enemyPlayer
                end
            end
        end
    end

    return closestPlayer
end

function startAimbot()
    aimbotConnection = runService.Stepped:Connect(function()
        if mouseDown and getgenv().AimbotEnabled then
            if not targetPlayer or not targetPlayer.Character or targetPlayer.Character:FindFirstChild("Humanoid").Health <= 0 then
                targetPlayer = getClosestEnemyPlayer()
            end
            
            if targetPlayer then
                local targetPosition = targetPlayer.Character.HumanoidRootPart.Position
                if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                    local currentCFrame = camera.CFrame
                    local targetCFrame = CFrame.new(currentCFrame.Position, targetPosition)
                    local newCFrame = currentCFrame:Lerp(targetCFrame, smoothness / 10)

                    camera.CFrame = newCFrame

                    if not mouseDown then
                        mouse1press()
                        mouseDown = true
                    end
                end
            else
                if mouseDown then
                    mouse1release()
                    mouseDown = false
                end
            end
        else
            if mouseDown then
                mouse1release()
                mouseDown = false
            end
        end
    end)
end

function stopAimbot()
    if aimbotConnection then
        aimbotConnection:Disconnect()
        aimbotConnection = nil
    end
    if mouseDown then
        mouse1release()
        mouseDown = false
    end
end

-- Aimbot Toggle
Tab1:Toggle{
    Name = "Enable Aimbot",
    Default = false,
    Callback = function(state)
        getgenv().AimbotEnabled = state
        if state then
            print("Aimbot Enabled")
            startAimbot()
        else
            print("Aimbot Disabled")
            stopAimbot()
        end
    end
}

-- ESP Toggle
Tab1:Toggle{
    Name = "Enable ESP",
    Default = false,
    Callback = function(state)
        if state then
            loadstring(game:HttpGet('https://raw.githubusercontent.com/zzerexx/scripts/main/UniversalEsp.lua'))()
            print("ESP Enabled")
        else
            print("ESP Disabled")
            -- Logic to disable ESP if needed
        end
    end
}

-- Tab 2: Gun Mods
local Tab2 = GUI:Tab{
    Name = "Gun Mods",
    Icon = "rbxassetid://8569322835"
}

-- Original Values Storage
local originalValues = {
    FireRate = {},
    ReloadTime = {},
    EReloadTime = {},
    Auto = {},
    Spread = {},
    Recoil = {}
}

-- Infinite Ammo Toggle
local SettingsInfinite = false
local ammoConnection

Tab2:Toggle{
    Name = "Infinite Ammo",
    Default = false,
    Description = "Toggle infinite ammo on or off.",
    Callback = function(state)
        SettingsInfinite = state
        if SettingsInfinite then
            ammoConnection = game:GetService("RunService").Stepped:Connect(function()
                pcall(function()
                    local playerGui = game:GetService("Players").LocalPlayer.PlayerGui
                    playerGui.GUI.Client.Variables.ammocount.Value = 99
                    playerGui.GUI.Client.Variables.ammocount2.Value = 99
                end)
            end)
            print("Infinite Ammo Enabled")
        else
            if ammoConnection then
                ammoConnection:Disconnect()
                ammoConnection = nil
            end
            print("Infinite Ammo Disabled")
        end
    end
}

-- Fast Reload Toggle
Tab2:Toggle{
    Name = "Fast Reload",
    Default = false,
    Description = "Toggle fast reload.",
    Callback = function(state)
        for _, v in pairs(game.ReplicatedStorage.Weapons:GetChildren()) do
            if v:FindFirstChild("ReloadTime") then
                if state then
                    if not originalValues.ReloadTime[v] then
                        originalValues.ReloadTime[v] = v.ReloadTime.Value
                    end
                    v.ReloadTime.Value = 0.01
                else
                    if originalValues.ReloadTime[v] then
                        v.ReloadTime.Value = originalValues.ReloadTime[v]
                    else
                        v.ReloadTime.Value = 0.8
                    end
                end
            end
            if v:FindFirstChild("EReloadTime") then
                if state then
                    if not originalValues.EReloadTime[v] then
                        originalValues.EReloadTime[v] = v.EReloadTime.Value
                    end
                    v.EReloadTime.Value = 0.01
                else
                    if originalValues.EReloadTime[v] then
                        v.EReloadTime.Value = originalValues.EReloadTime[v]
                    else
                        v.EReloadTime.Value = 0.8
                    end
                end
            end
        end
    end
}

-- Fast Fire Rate Toggle
Tab2:Toggle{
    Name = "Fast Fire Rate",
    Default = false,
    Description = "Toggle fast fire rate.",
    Callback = function(state)
        for _, v in pairs(game.ReplicatedStorage.Weapons:GetDescendants()) do
            if v.Name == "FireRate" or v.Name == "BFireRate" then
                if state then
                    if not originalValues.FireRate[v] then
                        originalValues.FireRate[v] = v.Value
                    end
                    v.Value = 0.02
                else
                    if originalValues.FireRate[v] then
                        v.Value = originalValues.FireRate[v]
                    else
                        v.Value = 0.8
                    end
                end
            end
        end
    end
}

-- Always Auto Toggle
Tab2:Toggle{
    Name = "Always Auto",
    Default = false,
    Description = "Toggle always auto-fire.",
    Callback = function(state)
        for _, v in pairs(game.ReplicatedStorage.Weapons:GetDescendants()) do
            if v.Name == "Auto" or v.Name == "AutoFire" or v.Name == "Automatic" or v.Name == "AutoShoot" or v.Name == "AutoGun" then
                if state then
                    if not originalValues.Auto[v] then
                        originalValues.Auto[v] = v.Value
                    end
                    v.Value = true
                else
                    if originalValues.Auto[v] then
                        v.Value = originalValues.Auto[v]
                    else
                        v.Value = false
                    end
                end
            end
        end
    end
}

-- No Spread Toggle
Tab2:Toggle{
    Name = "No Spread",
    Default = false,
    Description = "Toggle no spread.",
    Callback = function(state)
        for _, v in pairs(game:GetService("ReplicatedStorage").Weapons:GetDescendants()) do
            if v.Name == "MaxSpread" or v.Name == "Spread" or v.Name == "SpreadControl" then
                if state then
                    if not originalValues.Spread[v] then
                        originalValues.Spread[v] = v.Value
                    end
                    v.Value = 0
                else
                    if originalValues.Spread[v] then
                        v.Value = originalValues.Spread[v]
                    else
                        v.Value = 1
                    end
                end
            end
        end
    end
}

-- No Recoil Toggle
Tab2:Toggle{
    Name = "No Recoil",
    Default = false,
    Description = "Toggle no recoil.",
    Callback = function(state)
        for _, v in pairs(game:GetService("ReplicatedStorage").Weapons:GetDescendants()) do
            if v.Name == "RecoilControl" or v.Name == "Recoil" then
                if state then
                    if not originalValues.Recoil[v] then
                        originalValues.Recoil[v] = v.Value
                    end
                    v.Value = 0
                else
                    if originalValues.Recoil[v] then
                        v.Value = originalValues.Recoil[v]
                    else
                        v.Value = 1
                    end
                end
            end
        end
    end
}

-- Tab 3: Movement
local Tab3 = GUI:Tab{
    Name = "Movement",
    Icon = "rbxassetid://8569322835"
}

-- Infinite Jump Toggle
local jumpEnabled = false
local jumpHeight = 50
local UIS = game:GetService("UserInputService")

local function onInputBegan(UserInput)
    if jumpEnabled and UserInput.UserInputType == Enum.UserInputType.Keyboard and UserInput.KeyCode == Enum.KeyCode.Space then
        local character = game.Players.LocalPlayer.Character
        if character and character:FindFirstChild("Humanoid") then
            local humanoid = character.Humanoid
            if humanoid:GetState() == Enum.HumanoidStateType.Jumping or humanoid:GetState() == Enum.HumanoidStateType.Freefall then
                local rootPart = character:FindFirstChild("HumanoidRootPart")
                if rootPart then
                    rootPart.Velocity = Vector3.new(0, jumpHeight, 0)
                end
            end
        end
    end
end

UIS.InputBegan:Connect(onInputBegan)

Tab3:Toggle{
    Name = "Infinite Jump",
    Default = false,
    Callback = function(state)
        jumpEnabled = state
        if state then
            print("Infinite Jump Enabled")
        else
            print("Infinite Jump Disabled")
        end
    end
}

-- Tab 4: Credits
local Tab4 = GUI:Tab{ 
    Name = "Credits",
    Icon = "rbxassetid://8569322835"
}

-- Button to copy Discord server link
Tab4:Button{
    Name = "Copy Discord Link",
    Callback = function()
        setclipboard("https://discord.gg/GHU7dzJquE") -- Your actual Discord link
        print("Discord link copied to clipboard!")
    end
}

print("Script loaded successfully.")
